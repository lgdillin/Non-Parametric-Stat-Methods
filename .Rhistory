### Problem 1
state = c("Flordia, Georgia, Illinois, Iowa, Maine, Michigan, Montana, Nebraska, New Hampshire, Tennesee")
age_group = c("18", "18", "19-20", "18", "18-19", "18-20", "18", "19", "18-19", "18")
before = c(.262, .295, .216, .287, .227, .223, .512, .237, .348, .342)
after = c(.202, .227, .191, .209, .299, .151, .471, .151, .336, .307)
drinking = data.frame(state = state, age_group = age_group, before = before, after = after)
drinking
drinking
state = c("Flordia", "Georgia", "Illinois", "Iowa", "Maine", "Michigan", "Montana", "Nebraska", "New Hampshire", "Tennesee")
age_group = c("18", "18", "19-20", "18", "18-19", "18-20", "18", "19", "18-19", "18")
before = c(.262, .295, .216, .287, .227, .223, .512, .237, .348, .342)
after = c(.202, .227, .191, .209, .299, .151, .471, .151, .336, .307)
drinking = data.frame(state = state, age_group = age_group, before = before, after = after)
drinking
student = c(letters
student = c(letters)
student = c(letters)
student
student = c(toupper(letters))
studnet
student
student = c(toupper(letters[1:13]))
student
drinking$state
drinking$age_group
drinking$before
state = c("Flordia", "Georgia", "Illinois", "Iowa", "Maine", "Michigan", "Montana", "Nebraska", "New Hampshire", "Tennesee")
age_group = c("18", "18", "19-20", "18", "18-19", "18-20", "18", "19", "18-19", "18")
before_law = c(.262, .295, .216, .287, .227, .223, .512, .237, .348, .342)
after_law = c(.202, .227, .191, .209, .299, .151, .471, .151, .336, .307)
drinking = data.frame(state = state, age_group = age_group, before = before_law, after = after_law)
x = (drinking$after < drinking$before)
x
state = c("Flordia", "Georgia", "Illinois", "Iowa", "Maine", "Michigan", "Montana", "Nebraska", "New Hampshire", "Tennesee")
age_group = c("18", "18", "19-20", "18", "18-19", "18-20", "18", "19", "18-19", "18")
before_law = c(.262, .295, .216, .287, .227, .223, .512, .237, .348, .342)
after_law = c(.202, .227, .191, .209, .299, .151, .471, .151, .336, .307)
drinking = data.frame(state = state, age_group = age_group, before = before_law, after = after_law)
x = (drinking$after < drinking$before)
n = length(x)
binom.test(x, n,p = 0.5, alternative = "l", conf.level = 0.95)
n
state = c("Flordia", "Georgia", "Illinois", "Iowa", "Maine", "Michigan", "Montana", "Nebraska", "New Hampshire", "Tennesee")
age_group = c("18", "18", "19-20", "18", "18-19", "18-20", "18", "19", "18-19", "18")
before_law = c(.262, .295, .216, .287, .227, .223, .512, .237, .348, .342)
after_law = c(.202, .227, .191, .209, .299, .151, .471, .151, .336, .307)
drinking = data.frame(state = state, age_group = age_group, before = before_law, after = after_law)
x = sum(drinking$after < drinking$before)
n = length(x)
binom.test(x, n,p = 0.5, alternative = "l", conf.level = 0.95)
state = c("Flordia", "Georgia", "Illinois", "Iowa", "Maine", "Michigan", "Montana", "Nebraska", "New Hampshire", "Tennesee")
age_group = c("18", "18", "19-20", "18", "18-19", "18-20", "18", "19", "18-19", "18")
before_law = c(.262, .295, .216, .287, .227, .223, .512, .237, .348, .342)
after_law = c(.202, .227, .191, .209, .299, .151, .471, .151, .336, .307)
drinking = data.frame(state = state, age_group = age_group, before = before_law, after = after_law)
x = sum(drinking$after < drinking$before)
n = length(drinking$before)
binom.test(x, n,p = 0.5, alternative = "l", conf.level = 0.95)
x
state = c("Flordia", "Georgia", "Illinois", "Iowa", "Maine", "Michigan", "Montana", "Nebraska", "New Hampshire", "Tennesee")
age_group = c("18", "18", "19-20", "18", "18-19", "18-20", "18", "19", "18-19", "18")
before_law = c(.262, .295, .216, .287, .227, .223, .512, .237, .348, .342)
after_law = c(.202, .227, .191, .209, .299, .151, .471, .151, .336, .307)
drinking = data.frame(state = state, age_group = age_group, before = before_law, after = after_law)
x = (drinking$after < drinking$before)
n = length(drinking$before)
binom.test(x, n,p = 0.5, alternative = "l", conf.level = 0.95)
print("hi")
x = c(16.55,15.36,15.94,16.43,16.01)
y = c(16.05,15.98,16.1,15.88,15.91)
siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)
source("siegel.tukey.R")
x = c(16.55,15.36,15.94,16.43,16.01)
y = c(16.05,15.98,16.1,15.88,15.91)
siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)
setwd("C:/Users/Jyotishka/Documents/Github/Non-parametric-stat-methods")
setwd("C:\Users\derek\Documents\GitHub\Non-Parametric-Stat-Methods")
setwd("C:\\Users\\derek\\Documents\\GitHub\\Non-Parametric-Stat-Methods")
source("siegel.tukey.R")
x = c(16.55,15.36,15.94,16.43,16.01)
y = c(16.05,15.98,16.1,15.88,15.91)
siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)
x = c(33,62,84,85,88,93,97)
y = c(4,16,48,51,66,98)
siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)
setwd("C:\\Users\\derek\\Documents\\GitHub\\Non-Parametric-Stat-Methods")
source("siegel.tukey.R")
x = c(33,62,84,85,88,93,97)
y = c(4,16,48,51,66,98)
result = siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)
result
x=c(33,62,84,85,88,93,97)
y=c(4,16,48,51,66,98)
siegel.tukey(x,y)
### 4
x<-c(177,200,227,230,232,268,272,297,47,105,126,142,158,172,197,220,225,230,262,270)
id<-c(rep(0,8),rep(1,12))
siegel.tukey(x,id,T,adjust.median=T)
source("siegel.tukey.R")
x = c(44, 71, 95, 69, 67, 82, 86)
y = c(24, 27, 79, 62, 75, 87)
result = siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)
setwd("C:\\Users\\derek\\Documents\\GitHub\\Non-Parametric-Stat-Methods")
source("siegel.tukey.R")
x = c(33,62,84,85,88,93,97)
y = c(4,16,48,51,66,98)
result = siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)
result = siegel.tukey(y,x,id.col=FALSE,adjust.median=FALSE)
x = c(16.55,15.36,15.94,16.43,16.01)
y = c(16.05,15.98,16.1,15.88,15.91)
siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)
n = length(x[id==1])
U = siegel.tukey(x~id)$statistic + m*(m+1)/2
clt.mu = m*(m+n+1)/2
clt.s2 = m*n*(m+n+1)/12
(Z_score = (U-clt.mu-1/2)/(sqrt(clt.s2))) # Continuity correction, minus 1/2
(P.value = 2*(1 - pnorm(Z_score))) # 2*P(Z > z) since alt = "two.sided"
x = c(16.55,15.36,15.94,16.43,16.01)
y = c(16.05,15.98,16.1,15.88,15.91)
m = length(x)
n = length(x)
U = siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)$statistic + m*(m+1)/2
clt.mu = m*(m+n+1)/2
clt.s2 = m*n*(m+n+1)/12
(Z_score = (U-clt.mu-1/2)/(sqrt(clt.s2))) # Continuity correction, minus 1/2
(P.value = 2*(1 - pnorm(Z_score))) # 2*P(Z > z) since alt = "two.sided"
source("siegel.tukey.R")
x = c(21,20,29,22,18,32,31)
y = c(45,14,35,58,41,64,25)
result = siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)
source("siegel.tukey.R")
x = c(21,20,29,22,18,32,31)
y = c(45,14,35,58,41,64,25)
m = length(x)
n = length(y)
U = siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)$statistic + m*(m+1)/2
clt.mu = m*(m+n+1)/2
clt.s2 = m*n*(m+n+1)/12
(Z_score = (U-clt.mu-1/2)/(sqrt(clt.s2))) # Continuity correction, minus 1/2
(P.value = 2*(1 - pnorm(Z_score))) # 2*P(Z > z) since alt = "two.sided"
x = c(21,20,29,22,18,32,31)
y = c(45,14,35,58,41,64,25)
m = length(x)
n = length(y)
# U = siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)$statistic + m*(m+1)/2
U = wilcox.test(x, y, paired = F, alternative = "two.sided", correct = T)
clt.mu = m*(m+n+1)/2
clt.s2 = m*n*(m+n+1)/12
(Z_score = (U-clt.mu-1/2)/(sqrt(clt.s2))) # Continuity correction, minus 1/2
(P.value = 2*(1 - pnorm(Z_score))) # 2*P(Z > z) since alt = "two.sided"
x = c(21,20,29,22,18,32,31)
y = c(45,14,35,58,41,64,25)
m = length(x)
n = length(y)
# U = siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)$statistic + m*(m+1)/2
U = wilcox.test(x, y, paired = F, alternative = "two.sided", correct = T)
clt.mu = m*n/2
clt.s2 = m*n*(m+n+1)/12
(Z_score = (U-clt.mu-1/2)/(sqrt(clt.s2))) # Continuity correction, minus 1/2
(P.value = 2*(1 - pnorm(Z_score))) # 2*P(Z > z) since alt = "two.sided"
x = c(21,20,29,22,18,32,31)
y = c(45,14,35,58,41,64,25)
m = length(x)
n = length(y)
# U = siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)$statistic + m*(m+1)/2
U = wilcox.test(x, y, paired = F, alternative = "two.sided", correct = T)$statistic
clt.mu = m*n/2
clt.s2 = m*n*(m+n+1)/12
(Z_score = (U-clt.mu-1/2)/(sqrt(clt.s2))) # Continuity correction, minus 1/2
(P.value = 2*(1 - pnorm(Z_score))) # 2*P(Z > z) since alt = "two.sided"
U
source("siegel.tukey.R")
x = c(16.55,15.36,15.94,16.43,16.01)
y = c(16.05,15.98,16.1,15.88,15.91)
m = length(x)
n = length(y)
# U = siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)$statistic + m*(m+1)/2
U = wilcox.test(x, y, paired = F, alternative = "two.sided", correct = T)$statistic
clt.mu = m*n/2
clt.s2 = m*n*(m+n+1)/12
(Z_score = (U-clt.mu-1/2)/(sqrt(clt.s2))) # Continuity correction, minus 1/2
(P.value = 2*(1 - pnorm(Z_score))) # 2*P(Z > z) since alt = "two.sided"
x = c(16.55,15.36,15.94,16.43,16.01)
y = c(16.05,15.98,16.1,15.88,15.91)
m = length(x)
n = length(y)
U = siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)$statistic + m*(m+1)/2
#U = wilcox.test(x, y, paired = F, alternative = "two.sided", correct = T)$statistic
clt.mu = m*n/2
clt.s2 = m*n*(m+n+1)/12
(Z_score = (abs(U-clt.mu) -1/2)/(sqrt(clt.s2))) # Continuity correction, minus 1/2
(P.value = 2*(1 - pnorm(Z_score))) # 2*P(Z > z) since alt = "two.sided"
source("siegel.tukey.R")
x = c(16.55,15.36,15.94,16.43,16.01)
y = c(16.05,15.98,16.1,15.88,15.91)
m = length(x)
n = length(y)
U = siegel.tukey(x,y,id.col=FALSE,adjust.median=FALSE)$statistic #+ m*(m+1)/2
#U = wilcox.test(x, y, paired = F, alternative = "two.sided", correct = T)$statistic
clt.mu = m*n/2
clt.s2 = m*n*(m+n+1)/12
(Z_score = (abs(U-clt.mu) -1/2)/(sqrt(clt.s2))) # Continuity correction, minus 1/2
(P.value = 2*(1 - pnorm(Z_score))) # 2*P(Z > z) since alt = "two.sided"
U
